;;
;;  TON Single SBT Smart Contract
;;

int min_tons_for_storage() asm "50000000 PUSHINT"; ;; 0.05 TON

;;
;;  Storage
;;
;;  MsgAddressInt owner_address
;;  MsgAddressInt editor_address
;;  cell content
;;  uint256 pub_key
;;  uint32 seqno
;;

_ load_data() {
    slice ds = get_data().begin_parse();

    return (
        ds~load_msg_addr(),    ;; owner_address
        ds~load_msg_addr(),    ;; editor_address
        ds~load_ref(),         ;; content
        ds~load_uint(256),     ;; pub_key
        ds~load_uint(32)       ;; seqno
    );
}

() store_data(slice owner_address, slice editor_address, cell content, int pub_key, int seqno) impure {
    set_data(
        begin_cell()
            .store_slice(owner_address)
            .store_slice(editor_address)
            .store_ref(content)
            .store_uint(pub_key, 256)
            .store_uint(seqno, 32)
            .end_cell()
    );
}

() send_msg(int flag, slice to_address, int amount, int op, int query_id, builder payload, int send_mode) impure inline {
    var msg = begin_cell()
        .store_uint(flag, 6)
        .store_slice(to_address)
        .store_coins(amount)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(op, 32)
        .store_uint(query_id, 64);

    if (~ builder_null?(payload)) {
        msg = msg.store_builder(payload);
    }

    send_raw_message(msg.end_cell(), send_mode);
}

() pull_ownership(int my_balance, slice owner_address, slice editor_address, cell content, slice sender_address, int query_id, slice in_msg_body, int fwd_fees, int pub_key, int seqno) impure inline {
    slice sign_cell = in_msg_body~load_ref().begin_parse();
    throw_if(401, check_signature(slice_hash(in_msg_body), sign_cell.preload_bits(512), pub_key) == 0);
    throw_if(409, seqno != in_msg_body~load_uint(32));

    slice new_owner_address = in_msg_body~load_msg_addr();
    if (new_owner_address.slice_bits() > 2) {
        force_chain(new_owner_address);
    }

    throw_unless(403, equal_slices(sender_address, new_owner_address) | equal_slices(null_addr(), new_owner_address));

    slice response_destination = in_msg_body~load_msg_addr();
    in_msg_body~load_int(1); ;; this nft don't use custom_payload
    int forward_amount = in_msg_body~load_coins();

    int rest_amount = my_balance - min_tons_for_storage();
    if (forward_amount) {
      rest_amount -= (forward_amount + fwd_fees);
    }
    int need_response = response_destination.preload_uint(2) != 0; ;; if NOT addr_none: 00
    if (need_response) {
      rest_amount -= fwd_fees;
    }

    throw_unless(402, rest_amount >= 0); ;; base sbt spends fixed amount of gas, will not check for response

    if (forward_amount) {
      send_msg(flag::regular(), new_owner_address, forward_amount, op::ownership_assigned(), query_id, begin_cell().store_slice(owner_address).store_slice(in_msg_body), 1);  ;; paying fees, revert on errors
    }
    if (need_response) {
      force_chain(response_destination);
      send_msg(flag::regular(), response_destination, rest_amount, op::excesses(), query_id, null(), 1); ;; paying fees, revert on errors
    }

    store_data(new_owner_address, editor_address, content, pub_key, seqno + 1);
}

() transfer_editorship(int my_balance, slice owner_address, slice editor_address, cell content, slice sender_address, int query_id, slice in_msg_body, int fwd_fees, int pub_key, int seqno) impure inline {
    throw_unless(401, equal_slices(sender_address, editor_address));

    slice new_editor_address = in_msg_body~load_msg_addr();
    force_chain(new_editor_address);
    slice response_destination = in_msg_body~load_msg_addr();
    in_msg_body~load_int(1); ;; this sbt don't use custom_payload
    int forward_amount = in_msg_body~load_coins();

    int rest_amount = my_balance - min_tons_for_storage();
    if (forward_amount) {
      rest_amount -= (forward_amount + fwd_fees);
    }
    int need_response = response_destination.preload_uint(2) != 0; ;; if NOT addr_none: 00
    if (need_response) {
      rest_amount -= fwd_fees;
    }

    throw_unless(402, rest_amount >= 0); ;; base sbt spends fixed amount of gas, will not check for response

    if (forward_amount) {
      send_msg(flag::regular(), new_editor_address, forward_amount, op::editorship_assigned(), query_id, begin_cell().store_slice(editor_address).store_slice(in_msg_body), 1);  ;; paying fees, revert on errors
    }
    if (need_response) {
      force_chain(response_destination);
      send_msg(flag::regular(), response_destination, rest_amount, op::excesses(), query_id, null(), 1); ;; paying fees, revert on errors
    }

    store_data(owner_address, new_editor_address, content, pub_key, seqno);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();

    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = cs~load_coins(); ;; we use message fwd_fee for estimation of forward_payload costs

    (slice owner_address, slice editor_address, cell content, int pub_key, int seqno) = load_data();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (flags & 1) { ;; route all prove_ownership bounced messages to owner
      if (op == op::verify_ownership()) {
        send_msg(flag::regular() + flag::bounced(), owner_address, 0, op::verify_ownership(), query_id, begin_cell().store_slice(in_msg_body), 64);  ;; carry all the remaining value of the inbound message
      }
      return ();
    }

    if (op == op::transfer()) {
      throw(403);
      return ();
    }
    if (op == op::get_static_data()) {
        send_msg(0x10, sender_address, 0, op::report_static_data(), query_id, begin_cell().store_uint(0, 256).store_slice(null_addr()), 64);  ;; carry all the remaining value of the inbound message
        return ();
    }
    if (op == op::pull_ownership()) {
      ;; if on null address = destroyed
      throw_unless(404, owner_address.slice_bits() > 2);

      pull_ownership(my_balance, owner_address, editor_address, content, sender_address, query_id, in_msg_body, fwd_fee, pub_key, seqno);
      return ();
    }
    if (op == op::prove_ownership()) {
      throw_unless(401, equal_slices(owner_address, sender_address));

      slice dest = in_msg_body~load_msg_addr();
      send_msg(flag::regular() + flag::bounce(), dest, 0, op::verify_ownership(), query_id, begin_cell().store_uint(0, 256).store_slice(owner_address).store_slice(in_msg_body), 64);  ;; carry all the remaining value of the inbound message
      return ();
    }
    if (op == op::transfer_editorship()) {
        transfer_editorship(my_balance, owner_address, editor_address, content, sender_address, query_id, in_msg_body, fwd_fee, pub_key, seqno);
        return ();
    }
    if (op == op::edit_content()) {
        throw_unless(410, equal_slices(sender_address, editor_address));
        store_data(owner_address, editor_address, in_msg_body~load_ref(), pub_key, seqno);
        return ();
    }
    throw(0xffff);
}

;;
;;  GET Methods
;;

(int, int, slice, slice, cell) get_nft_data() method_id {
    (slice owner_address, _, cell content, _, _) = load_data();
    return (true, 0, null_addr(), owner_address, content);
}

slice get_editor() method_id {
    (_, slice editor_address, _, _, _) = load_data();
    return editor_address;
}

int seqno() method_id {
  (_, _, _, _, int seqno) = load_data();
  return seqno;
}

int get_public_key() method_id {
  (_, _, _, int public_key, _) = load_data();
  return public_key;
}