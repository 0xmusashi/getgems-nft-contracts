;;
;;  TON SBT Item Smart Contract
;;

{-

    NOTE that this tokens can be transferred within the same workchain.

    This is suitable for most tokens, if you need tokens transferable between workchains there are two solutions:

    1) use more expensive but universal function below to calculate message forward fee for arbitrary destination (see `misc/forward-fee-calc.cs`)

    2) use token holder proxies in target workchain (that way even 'non-universal' token can be used from any workchain)

-}

int min_tons_for_storage() asm "50000000 PUSHINT"; ;; 0.05 TON

;;
;;  Storage
;;
;;  uint64 index
;;  MsgAddressInt collection_address
;;  MsgAddressInt owner_address
;;  cell content
;;  uint256 pub_key
;;  uint32 seqno
;;

(int, int, slice, slice, cell, int, int) load_data() {
    slice ds = get_data().begin_parse();
    var (index, collection_address) = (ds~load_uint(64), ds~load_msg_addr());
    if (ds.slice_bits() > 0) {
      return (-1, index, collection_address, ds~load_msg_addr(), ds~load_ref(), ds~load_uint(256), ds~load_uint(32));
    } else {
      return (0, index, collection_address, null(), null(), 0, 0); ;; sbt not initialized yet
    }
}

() store_data(int index, slice collection_address, slice owner_address, cell content, int pub_key, int seqno) impure {
    set_data(
        begin_cell()
            .store_uint(index, 64)
            .store_slice(collection_address)
            .store_slice(owner_address)
            .store_ref(content)
            .store_uint(pub_key, 256)
            .store_uint(seqno, 32)
            .end_cell()
    );
}

() send_msg(int flag, slice to_address, int amount, int op, int query_id, builder payload, int send_mode) impure inline {
  var msg = begin_cell()
    .store_uint(flag, 6) ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool packages:MsgAddress
    .store_slice(to_address)
    .store_coins(amount)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op, 32)
    .store_uint(query_id, 64);

  if (~ builder_null?(payload)) {
    msg = msg.store_builder(payload);
  }

  send_raw_message(msg.end_cell(), send_mode);
}

() pull_ownership(int my_balance, int index, slice collection_address, slice owner_address, cell content, slice sender_address, int query_id, slice in_msg_body, int fwd_fees, int pub_key, int seqno) impure inline {
    slice sign_cell = in_msg_body~load_ref().begin_parse();
    throw_if(401, check_signature(slice_hash(in_msg_body), sign_cell.preload_bits(512), pub_key) == 0);
    throw_if(409, seqno != in_msg_body~load_uint(32));

    slice new_owner_address = in_msg_body~load_msg_addr();
    if (new_owner_address.slice_bits() > 2) {
        force_chain(new_owner_address);
    }

    throw_unless(403, equal_slices(sender_address, new_owner_address) | equal_slices(null_addr(), new_owner_address));

    slice response_destination = in_msg_body~load_msg_addr();
    in_msg_body~load_int(1); ;; this nft don't use custom_payload
    int forward_amount = in_msg_body~load_coins();

    int rest_amount = my_balance - min_tons_for_storage();
    if (forward_amount) {
      rest_amount -= (forward_amount + fwd_fees);
    }
    int need_response = response_destination.preload_uint(2) != 0; ;; if NOT addr_none: 00
    if (need_response) {
      rest_amount -= fwd_fees;
    }

    throw_unless(402, rest_amount >= 0); ;; base sbt spends fixed amount of gas, will not check for response

    if (forward_amount) {
      send_msg(flag::regular(), new_owner_address, forward_amount, op::ownership_assigned(), query_id, begin_cell().store_slice(owner_address).store_slice(in_msg_body), 1);  ;; paying fees, revert on errors
    }
    if (need_response) {
      force_chain(response_destination);
      send_msg(flag::regular(), response_destination, rest_amount, op::excesses(), query_id, null(), 1); ;; paying fees, revert on errors
    }

    store_data(index, collection_address, new_owner_address, content, pub_key, seqno + 1);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    slice sender_address = cs~load_msg_addr();

    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = cs~load_coins(); ;; we use message fwd_fee for estimation of forward_payload costs

    (int init?, int index, slice collection_address, slice owner_address, cell content, int pub_key, int seqno) = load_data();
    if (~ init?) {
      throw_unless(405, equal_slices(collection_address, sender_address));
      store_data(index, collection_address, in_msg_body~load_msg_addr(), in_msg_body~load_ref(), in_msg_body~load_uint(256), 1);
      return ();
    }

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (flags & 1) { ;; route all prove_ownership bounced messages to owner
      if (op == op::verify_ownership()) {
        send_msg(flag::regular() + flag::bounced(), owner_address, 0, op::verify_ownership(), query_id, begin_cell().store_slice(in_msg_body), 64);  ;; carry all the remaining value of the inbound message
      }
      return ();
    }

    if (op == op::transfer()) {
      throw(403);
    }
    if (op == op::pull_ownership()) {
      ;; if on null address = destroyed
      throw_unless(404, owner_address.slice_bits() > 2);

      pull_ownership(my_balance, index, collection_address, owner_address, content, sender_address, query_id, in_msg_body, fwd_fee, pub_key, seqno);
      return ();
    }
    if (op == op::prove_ownership()) {
      throw_unless(401, equal_slices(owner_address, sender_address));

      slice dest = in_msg_body~load_msg_addr();
      send_msg(flag::regular() + flag::bounce(), dest, 0, op::verify_ownership(), query_id, begin_cell().store_uint(index, 256).store_slice(owner_address).store_slice(in_msg_body), 64);  ;; carry all the remaining value of the inbound message
      return ();
    }
    if (op == op::get_static_data()) {
      send_msg(flag::regular(), sender_address, 0, op::report_static_data(), query_id, begin_cell().store_uint(index, 256).store_slice(collection_address), 64);  ;; carry all the remaining value of the inbound message
      return ();
    }
    throw(0xffff);
}

;;
;;  GET Methods
;;

(int, int, slice, slice, cell) get_nft_data() method_id {
  (int init?, int index, slice collection_address, slice owner_address, cell content, _, _) = load_data();
  return (init?, index, collection_address, owner_address, content);
}

int seqno() method_id {
  (_, _, _, _, _, _, int seqno) = load_data();
  return seqno;
}

int get_public_key() method_id {
  (_, _, _, _, _, int public_key, _) = load_data();
  return public_key;
}